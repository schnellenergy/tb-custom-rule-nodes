System.register(["@angular/core","@shared/public-api","@angular/forms","@ngrx/store","@angular/material/input","@angular/material/form-field","@angular/flex-layout/flex","@ngx-translate/core","@angular/common","@angular/material/checkbox","@home/components/public-api"],(function(e){"use strict";var t,o,r,a,n,l,i,m,s,p,u,f,c,y,d,g;return{setters:[function(e){t=e,o=e.Component,r=e.NgModule},function(e){a=e.RuleNodeConfigurationComponent,n=e.SharedModule},function(e){l=e.Validators,i=e},function(e){m=e},function(e){s=e},function(e){p=e},function(e){u=e},function(e){f=e},function(e){c=e.CommonModule,y=e},function(e){d=e},function(e){g=e.HomeComponentsModule}],execute:function(){class x extends a{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.getSumIntoMetadataConfigForm}onConfigurationSet(e){this.getSumIntoMetadataConfigForm=this.fb.group({inputKey:[e?e.inputKey:null,[l.required]],outputKey:[e?e.outputKey:null,[l.required]]})}}e("GetSumIntoMetadataConfigComponent",x),x.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:x,deps:[{token:m.Store},{token:i.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),x.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:x,selector:"tb-enrichment-node-sum-into-metadata-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="getSumIntoMetadataConfigForm" fxLayout="column">\r\n    <mat-form-field class="mat-block">\r\n        <mat-label translate>tb.rulenode.input-key</mat-label>\r\n        <input matInput formControlName="inputKey" required>\r\n    </mat-form-field>\r\n    <mat-form-field class="mat-block">\r\n        <mat-label translate>tb.rulenode.output-key</mat-label>\r\n        <input matInput formControlName="outputKey" required>\r\n    </mat-form-field>\r\n</section>\r\n',dependencies:[{kind:"directive",type:s.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:p.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:p.MatLabel,selector:"mat-label"},{kind:"directive",type:u.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:i.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:i.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:i.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:i.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:i.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:i.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:f.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:x,decorators:[{type:o,args:[{selector:"tb-enrichment-node-sum-into-metadata-config",template:'<section [formGroup]="getSumIntoMetadataConfigForm" fxLayout="column">\r\n    <mat-form-field class="mat-block">\r\n        <mat-label translate>tb.rulenode.input-key</mat-label>\r\n        <input matInput formControlName="inputKey" required>\r\n    </mat-form-field>\r\n    <mat-form-field class="mat-block">\r\n        <mat-label translate>tb.rulenode.output-key</mat-label>\r\n        <input matInput formControlName="outputKey" required>\r\n    </mat-form-field>\r\n</section>\r\n'}]}],ctorParameters:function(){return[{type:m.Store},{type:i.FormBuilder}]}});class C{}e("CustomNodesConfigEnrichmentModule",C),C.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:C,deps:[],target:t.ɵɵFactoryTarget.NgModule}),C.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:C,declarations:[x],imports:[c,n],exports:[x]}),C.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:C,imports:[c,n]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:C,decorators:[{type:r,args:[{declarations:[x],imports:[c,n],exports:[x]}]}]});class b extends a{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.checkKeyConfigForm}onConfigurationSet(e){this.checkKeyConfigForm=this.fb.group({key:[e?e.key:null,[l.required]]})}}e("CheckKeyConfigComponent",b),b.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:b,deps:[{token:m.Store},{token:i.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),b.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:b,selector:"tb-filter-node-check-key-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="checkKeyConfigForm" fxLayout="column">\r\n    <mat-form-field class="mat-block">\r\n        <mat-label translate>tb.rulenode.msg-key</mat-label>\r\n        <input matInput formControlName="key" required>\r\n    </mat-form-field>\r\n</section>\r\n',dependencies:[{kind:"directive",type:s.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:p.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:p.MatLabel,selector:"mat-label"},{kind:"directive",type:u.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:i.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:i.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:i.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:i.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:i.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:i.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:f.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:b,decorators:[{type:o,args:[{selector:"tb-filter-node-check-key-config",template:'<section [formGroup]="checkKeyConfigForm" fxLayout="column">\r\n    <mat-form-field class="mat-block">\r\n        <mat-label translate>tb.rulenode.msg-key</mat-label>\r\n        <input matInput formControlName="key" required>\r\n    </mat-form-field>\r\n</section>\r\n'}]}],ctorParameters:function(){return[{type:m.Store},{type:i.FormBuilder}]}});class L{}e("CustomNodesConfigFilterModule",L),L.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:L,deps:[],target:t.ɵɵFactoryTarget.NgModule}),L.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:L,declarations:[b],imports:[c,n],exports:[b]}),L.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:L,imports:[c,n]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:L,decorators:[{type:r,args:[{declarations:[b],imports:[c,n],exports:[b]}]}]});class v extends a{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.getSumConfigForm}onConfigurationSet(e){this.getSumConfigForm=this.fb.group({inputKey:[e?e.inputKey:null,[l.required]],outputKey:[e?e.outputKey:null,[l.required]]})}}e("GetSumConfigComponent",v),v.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:v,deps:[{token:m.Store},{token:i.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),v.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:v,selector:"tb-transformation-node-sum-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="getSumConfigForm" fxLayout="column">\r\n    <mat-form-field class="mat-block">\r\n        <mat-label translate>tb.rulenode.input-key</mat-label>\r\n        <input matInput formControlName="inputKey" required>\r\n    </mat-form-field>\r\n    <mat-form-field class="mat-block">\r\n        <mat-label translate>tb.rulenode.output-key</mat-label>\r\n        <input matInput formControlName="outputKey" required>\r\n    </mat-form-field>\r\n</section>\r\n',dependencies:[{kind:"directive",type:s.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:p.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:p.MatLabel,selector:"mat-label"},{kind:"directive",type:u.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:i.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:i.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:i.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:i.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:i.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:i.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]},{kind:"directive",type:f.TranslateDirective,selector:"[translate],[ngx-translate]",inputs:["translate","translateParams"]}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:v,decorators:[{type:o,args:[{selector:"tb-transformation-node-sum-config",template:'<section [formGroup]="getSumConfigForm" fxLayout="column">\r\n    <mat-form-field class="mat-block">\r\n        <mat-label translate>tb.rulenode.input-key</mat-label>\r\n        <input matInput formControlName="inputKey" required>\r\n    </mat-form-field>\r\n    <mat-form-field class="mat-block">\r\n        <mat-label translate>tb.rulenode.output-key</mat-label>\r\n        <input matInput formControlName="outputKey" required>\r\n    </mat-form-field>\r\n</section>\r\n'}]}],ctorParameters:function(){return[{type:m.Store},{type:i.FormBuilder}]}});class k{}e("CustomNodesConfigTransformModule",k),k.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:k,deps:[],target:t.ɵɵFactoryTarget.NgModule}),k.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:k,declarations:[v],imports:[c,n],exports:[v]}),k.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:k,imports:[c,n]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:k,decorators:[{type:r,args:[{declarations:[v],imports:[c,n],exports:[v]}]}]});class h extends a{constructor(e,t){super(e),this.store=e,this.fb=t}configForm(){return this.sendToTcpConfigForm}onConfigurationSet(e){this.sendToTcpConfigForm=this.fb.group({hostKey:[e?e.hostKey:null,[l.required]],portKey:[e?e.portKey:null,[l.required]],tlsKey:[e?e.tlsKey:null],tlsConfig:this.fb.group({certificateKey:[e&&e.tlsConfig?e.tlsConfig.certificateKey:null],privateKeyKey:[e&&e.tlsConfig?e.tlsConfig.privateKeyKey:null],privateKeyPassphraseKey:[e&&e.tlsConfig?e.tlsConfig.privateKeyPassphraseKey:null],caCertificateKey:[e&&e.tlsConfig?e.tlsConfig.caCertificateKey:null],verifyServerCertificate:[e&&e.tlsConfig?e.tlsConfig.verifyServerCertificate:null],serverNameKey:[e&&e.tlsConfig?e.tlsConfig.serverNameKey:null],alpnProtocolKey:[e&&e.tlsConfig?e.tlsConfig.alpnProtocolKey:null]})})}}e("SendToTcpConfigComponent",h),h.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:h,deps:[{token:m.Store},{token:i.FormBuilder}],target:t.ɵɵFactoryTarget.Component}),h.ɵcmp=t.ɵɵngDeclareComponent({minVersion:"14.0.0",version:"15.2.10",type:h,selector:"tb-external-node-send-to-tcp-config",usesInheritance:!0,ngImport:t,template:'<section [formGroup]="sendToTcpConfigForm" fxLayout="column" class="tb-tcp-config-section">\r\n  <div fxLayout="row" fxLayoutGap="16px">\r\n    <mat-form-field class="mat-block" fxFlex>\r\n      <mat-label>Host Key <span style="color: #888;">(Key for Server IP in message/metadata)</span></mat-label>\r\n      <input matInput formControlName="hostKey" placeholder="e.g. tcpHost" required>\r\n    </mat-form-field>\r\n    <mat-form-field class="mat-block" fxFlex>\r\n      <mat-label>Port Key <span style="color: #888;">(Key for Port in message/metadata)</span></mat-label>\r\n      <input matInput formControlName="portKey" placeholder="e.g. tcpPort" required>\r\n    </mat-form-field>\r\n  </div>\r\n  <mat-checkbox formControlName="tlsKey" style="margin-bottom: 8px;">\r\n    <span>Enable TLS</span>\r\n  </mat-checkbox>\r\n  <div *ngIf="sendToTcpConfigForm.get(\'tlsKey\').value" [formGroup]="sendToTcpConfigForm.get(\'tlsConfig\')" class="tb-tcp-tls-section">\r\n    <div fxLayout="row" fxLayoutGap="16px">\r\n      <mat-form-field class="mat-block" fxFlex>\r\n        <mat-label>Certificate Key <span style="color: #888;">(Key for Certificate)</span></mat-label>\r\n        <input matInput formControlName="certificateKey" placeholder="e.g. certKey">\r\n      </mat-form-field>\r\n      <mat-form-field class="mat-block" fxFlex>\r\n        <mat-label>Private Key Key <span style="color: #888;">(Key for Private Key)</span></mat-label>\r\n        <input matInput formControlName="privateKeyKey" placeholder="e.g. privateKey">\r\n      </mat-form-field>\r\n    </div>\r\n    <mat-form-field class="mat-block">\r\n      <mat-label>Private Key Passphrase Key <span style="color: #888;">(Key for Private Key Passphrase)</span></mat-label>\r\n      <input matInput formControlName="privateKeyPassphraseKey" placeholder="e.g. passphraseKey">\r\n    </mat-form-field>\r\n    <mat-form-field class="mat-block">\r\n      <mat-label>CA Certificate Key <span style="color: #888;">(Key for CA Certificate)</span></mat-label>\r\n      <input matInput formControlName="caCertificateKey" placeholder="e.g. caCertKey">\r\n    </mat-form-field>\r\n    <mat-checkbox formControlName="verifyServerCertificate" style="margin-bottom: 8px;">\r\n      <span>Verify Server Certificate</span>\r\n    </mat-checkbox>\r\n    <mat-form-field class="mat-block">\r\n      <mat-label>Server Name Key <span style="color: #888;">(Key for Server Name (SNI))</span></mat-label>\r\n      <input matInput formControlName="serverNameKey" placeholder="e.g. serverName">\r\n    </mat-form-field>\r\n    <mat-form-field class="mat-block">\r\n      <mat-label>ALPN Protocol Key <span style="color: #888;">(Key for ALPN Protocol)</span></mat-label>\r\n      <input matInput formControlName="alpnProtocolKey" placeholder="e.g. alpnProtocol">\r\n    </mat-form-field>\r\n  </div>\r\n</section>',dependencies:[{kind:"directive",type:y.NgIf,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{kind:"component",type:d.MatCheckbox,selector:"mat-checkbox",inputs:["disableRipple","color","tabIndex"],exportAs:["matCheckbox"]},{kind:"directive",type:s.MatInput,selector:"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]",inputs:["disabled","id","placeholder","name","required","type","errorStateMatcher","aria-describedby","value","readonly"],exportAs:["matInput"]},{kind:"component",type:p.MatFormField,selector:"mat-form-field",inputs:["hideRequiredMarker","color","floatLabel","appearance","subscriptSizing","hintLabel"],exportAs:["matFormField"]},{kind:"directive",type:p.MatLabel,selector:"mat-label"},{kind:"directive",type:u.DefaultLayoutDirective,selector:"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]",inputs:["fxLayout","fxLayout.xs","fxLayout.sm","fxLayout.md","fxLayout.lg","fxLayout.xl","fxLayout.lt-sm","fxLayout.lt-md","fxLayout.lt-lg","fxLayout.lt-xl","fxLayout.gt-xs","fxLayout.gt-sm","fxLayout.gt-md","fxLayout.gt-lg"]},{kind:"directive",type:u.DefaultLayoutGapDirective,selector:"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]",inputs:["fxLayoutGap","fxLayoutGap.xs","fxLayoutGap.sm","fxLayoutGap.md","fxLayoutGap.lg","fxLayoutGap.xl","fxLayoutGap.lt-sm","fxLayoutGap.lt-md","fxLayoutGap.lt-lg","fxLayoutGap.lt-xl","fxLayoutGap.gt-xs","fxLayoutGap.gt-sm","fxLayoutGap.gt-md","fxLayoutGap.gt-lg"]},{kind:"directive",type:u.DefaultFlexDirective,selector:"  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]",inputs:["fxFlex","fxFlex.xs","fxFlex.sm","fxFlex.md","fxFlex.lg","fxFlex.xl","fxFlex.lt-sm","fxFlex.lt-md","fxFlex.lt-lg","fxFlex.lt-xl","fxFlex.gt-xs","fxFlex.gt-sm","fxFlex.gt-md","fxFlex.gt-lg"]},{kind:"directive",type:i.DefaultValueAccessor,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{kind:"directive",type:i.NgControlStatus,selector:"[formControlName],[ngModel],[formControl]"},{kind:"directive",type:i.NgControlStatusGroup,selector:"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]"},{kind:"directive",type:i.RequiredValidator,selector:":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",inputs:["required"]},{kind:"directive",type:i.FormGroupDirective,selector:"[formGroup]",inputs:["formGroup"],outputs:["ngSubmit"],exportAs:["ngForm"]},{kind:"directive",type:i.FormControlName,selector:"[formControlName]",inputs:["formControlName","disabled","ngModel"],outputs:["ngModelChange"]}]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:h,decorators:[{type:o,args:[{selector:"tb-external-node-send-to-tcp-config",template:'<section [formGroup]="sendToTcpConfigForm" fxLayout="column" class="tb-tcp-config-section">\r\n  <div fxLayout="row" fxLayoutGap="16px">\r\n    <mat-form-field class="mat-block" fxFlex>\r\n      <mat-label>Host Key <span style="color: #888;">(Key for Server IP in message/metadata)</span></mat-label>\r\n      <input matInput formControlName="hostKey" placeholder="e.g. tcpHost" required>\r\n    </mat-form-field>\r\n    <mat-form-field class="mat-block" fxFlex>\r\n      <mat-label>Port Key <span style="color: #888;">(Key for Port in message/metadata)</span></mat-label>\r\n      <input matInput formControlName="portKey" placeholder="e.g. tcpPort" required>\r\n    </mat-form-field>\r\n  </div>\r\n  <mat-checkbox formControlName="tlsKey" style="margin-bottom: 8px;">\r\n    <span>Enable TLS</span>\r\n  </mat-checkbox>\r\n  <div *ngIf="sendToTcpConfigForm.get(\'tlsKey\').value" [formGroup]="sendToTcpConfigForm.get(\'tlsConfig\')" class="tb-tcp-tls-section">\r\n    <div fxLayout="row" fxLayoutGap="16px">\r\n      <mat-form-field class="mat-block" fxFlex>\r\n        <mat-label>Certificate Key <span style="color: #888;">(Key for Certificate)</span></mat-label>\r\n        <input matInput formControlName="certificateKey" placeholder="e.g. certKey">\r\n      </mat-form-field>\r\n      <mat-form-field class="mat-block" fxFlex>\r\n        <mat-label>Private Key Key <span style="color: #888;">(Key for Private Key)</span></mat-label>\r\n        <input matInput formControlName="privateKeyKey" placeholder="e.g. privateKey">\r\n      </mat-form-field>\r\n    </div>\r\n    <mat-form-field class="mat-block">\r\n      <mat-label>Private Key Passphrase Key <span style="color: #888;">(Key for Private Key Passphrase)</span></mat-label>\r\n      <input matInput formControlName="privateKeyPassphraseKey" placeholder="e.g. passphraseKey">\r\n    </mat-form-field>\r\n    <mat-form-field class="mat-block">\r\n      <mat-label>CA Certificate Key <span style="color: #888;">(Key for CA Certificate)</span></mat-label>\r\n      <input matInput formControlName="caCertificateKey" placeholder="e.g. caCertKey">\r\n    </mat-form-field>\r\n    <mat-checkbox formControlName="verifyServerCertificate" style="margin-bottom: 8px;">\r\n      <span>Verify Server Certificate</span>\r\n    </mat-checkbox>\r\n    <mat-form-field class="mat-block">\r\n      <mat-label>Server Name Key <span style="color: #888;">(Key for Server Name (SNI))</span></mat-label>\r\n      <input matInput formControlName="serverNameKey" placeholder="e.g. serverName">\r\n    </mat-form-field>\r\n    <mat-form-field class="mat-block">\r\n      <mat-label>ALPN Protocol Key <span style="color: #888;">(Key for ALPN Protocol)</span></mat-label>\r\n      <input matInput formControlName="alpnProtocolKey" placeholder="e.g. alpnProtocol">\r\n    </mat-form-field>\r\n  </div>\r\n</section>'}]}],ctorParameters:function(){return[{type:m.Store},{type:i.FormBuilder}]}});class F{}e("CustomNodesConfigExternalModule",F),F.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:F,deps:[],target:t.ɵɵFactoryTarget.NgModule}),F.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:F,declarations:[h],imports:[c,n],exports:[h]}),F.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:F,imports:[c,n]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:F,decorators:[{type:r,args:[{declarations:[h],imports:[c,n],exports:[h]}]}]});class N{constructor(e){!function(e){e.setTranslation("en_US",{tb:{rulenode:{"msg-key":"Message key","input-key":"Input key","output-key":"Output key"}}},!0)}(e)}}e("CustomNodesConfigModule",N),N.ɵfac=t.ɵɵngDeclareFactory({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:N,deps:[{token:f.TranslateService}],target:t.ɵɵFactoryTarget.NgModule}),N.ɵmod=t.ɵɵngDeclareNgModule({minVersion:"14.0.0",version:"15.2.10",ngImport:t,type:N,imports:[c,n,g],exports:[L,C,k,F]}),N.ɵinj=t.ɵɵngDeclareInjector({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:N,imports:[c,n,g,L,C,k,F]}),t.ɵɵngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.10",ngImport:t,type:N,decorators:[{type:r,args:[{imports:[c,n,g],exports:[L,C,k,F]}]}],ctorParameters:function(){return[{type:f.TranslateService}]}})}}}));//# sourceMappingURL=custom-nodes-config.js.map
